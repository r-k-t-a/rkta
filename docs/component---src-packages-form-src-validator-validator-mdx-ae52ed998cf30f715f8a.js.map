{"version":3,"sources":["webpack:///../src/packages/form/src/validator/Validator.mdx"],"names":["_frontmatter","name","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","useState","Form","useErrors","makeValidator","Button","Card","CardHeader","CardBody","CardFooter","Divider","Addon","Input","flow","validate","type","properties","login","format","messages","required","password","FieldError","error","color","subtitle2","message","rize","css","onFormSubmit","Object","entries","console","log","caption","bgColor","invisible","right","isMDXComponent"],"mappings":"wUAYaA,G,UAAe,S,+NAENC,EAKW,aALjC,IAAsBA,EAMhBC,EAAc,CAClBF,gBAEIG,EAAYC,I,8DACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,cADR,cAGA,0EACA,iBAAQ,CACN,GAAM,SADR,SAGA,uBAAK,gCAAMC,WAAW,OAAU,CAC5B,UAAa,wBADZ,6FAML,iBAAQ,CACN,GAAM,WADR,WAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,29CAAo/CC,SAAO,GAC5hDL,QACAH,kBACAS,eACAC,UACAC,oBACAC,SACAC,cACAC,kBACAC,gBACAC,YACAC,wBACAC,oBACAC,wBACAC,kBACAC,cACAC,cACAC,UAjB4hD,gBAkB5hDvB,IAlB4hD,EAmB5hDJ,eAnB4hD,GAoB3hDQ,QAAQ,eACZ,WACK,IAoBMoB,EAAWV,YApBF,CACbW,KAAM,SACNC,WAAY,CACVC,MAAO,CACLF,KAAM,SACNG,OAAQ,QACRC,SAAU,CACRC,SAAU,qBACVF,OAAQ,iBAGZG,SAAU,CACRN,KAAM,SACNI,SAAU,CACRC,SAAU,2BAIhBA,SAAU,CAAC,QAAS,cAIhBE,EAAa,SAAC,GAEd,IADJnC,EACI,EADJA,KAEOoC,EAASpB,YAAUhB,GADtB,GAEJ,OAAOoC,EAAQ,YAAC,QAAD,CAAOC,MAAM,UAAUC,WAAS,EAAC/B,QAAQ,SACvD6B,EAAMG,SACE,MAGX,OAAO,YAAC,OAAD,CAAMC,KAAM,EAAGC,IAAG,EAGtBlC,QAAQ,QACX,YAAC,IAAD,CAAMoB,SAAUA,EAAUe,aAAchB,IAAKiB,OAAOC,QAASC,QAAQC,KAAMvC,QAAQ,QACjF,YAAC,aAAD,CAAYA,QAAQ,cAApB,kBACA,YAAC,WAAD,CAAUA,QAAQ,YAChB,YAAC,QAAD,CAAOwC,QAAQ,QAAQ/C,KAAK,QAAQgD,QAAQ,SAASzC,QAAQ,UAC7D,YAAC4B,EAAD,CAAYnC,KAAK,QAAQO,QAAQ,eACjC,YAAC,UAAD,CAAS0C,WAAS,EAAC1C,QAAQ,YAC3B,YAAC,QAAD,CAAOwC,QAAQ,WAAW/C,KAAK,WAAWgD,QAAQ,SAASpB,KAAK,WAAWrB,QAAQ,UACnF,YAAC4B,EAAD,CAAYnC,KAAK,WAAWO,QAAQ,gBAEtC,YAAC,aAAD,CAAY2C,OAAK,EAAC3C,QAAQ,cACxB,YAAC,SAAD,CAAQyC,QAAQ,UAAUpB,KAAK,SAASrB,QAAQ,UAAhD,iBAQR,iBAAQ,CACN,GAAM,aADR,aAGA,sBACE,kBAAIC,WAAW,MAAf,+BACA,kBAAIA,WAAW,MAAf,aAAkC,6BAAGA,WAAW,MAAS,CACrD,KAAQ,uCADsB,OAAlC,mB,6NAQNJ,EAAW+C,gBAAiB","file":"component---src-packages-form-src-validator-validator-mdx-ae52ed998cf30f715f8a.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/se/www/rkt-a/rkta/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { useState } from 'react';\nimport { Form, useErrors } from '../Form';\nimport { makeValidator } from './makeValidator';\nimport { Button, Card, CardHeader, CardBody, CardFooter, Divider, Addon, Input } from '@rkta/ui';\nimport flow from 'lodash/flow';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst FieldError = makeShortcode(\"FieldError\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2 {...{\n      \"id\": \"validation\"\n    }}>{`Validation`}</h2>\n    <p>{`Declaratively validate forms against JSON schema.`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { makeValidator } from '@rkta/form';\n\nconst validate = makeValidator(schema);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <Playground __position={0} __code={'() => {\\n  const schema = {\\n    type: \\'object\\',\\n    properties: {\\n      login: {\\n        type: \\'string\\',\\n        format: \\'email\\',\\n        messages: {\\n          required: \\'Please enter login\\',\\n          format: \\'Wrong format\\',\\n        },\\n      },\\n      password: {\\n        type: \\'string\\',\\n        messages: {\\n          required: \\'Please enter password\\',\\n        },\\n      },\\n    },\\n    required: [\\'login\\', \\'password\\'],\\n  }\\n  const validate = makeValidator(schema)\\n  const FieldError = ({ name }) => {\\n    const [error] = useErrors(name)\\n    return error ? (\\n      <Addon color=\\\"warning\\\" subtitle2>\\n        {error.message}\\n      </Addon>\\n    ) : null\\n  }\\n  return (\\n    <Card rize={1} css={{ maxWidth: \\'450px\\', margin: \\'24px auto\\' }}>\\n      <Form\\n        validate={validate}\\n        onFormSubmit={flow(Object.entries, console.log)}\\n      >\\n        <CardHeader>Please Sign In</CardHeader>\\n        <CardBody>\\n          <Input caption=\\\"Login\\\" name=\\\"login\\\" bgColor=\\\"paper2\\\" />\\n          <FieldError name=\\\"login\\\" />\\n          <Divider invisible />\\n          <Input\\n            caption=\\\"Password\\\"\\n            name=\\\"password\\\"\\n            bgColor=\\\"paper2\\\"\\n            type=\\\"password\\\"\\n          />\\n          <FieldError name=\\\"password\\\" />\\n        </CardBody>\\n        <CardFooter right>\\n          <Button bgColor=\\\"primary\\\" type=\\\"submit\\\">\\n            Sign In\\n          </Button>\\n        </CardFooter>\\n      </Form>\\n    </Card>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      Form,\n      useErrors,\n      makeValidator,\n      Button,\n      Card,\n      CardHeader,\n      CardBody,\n      CardFooter,\n      Divider,\n      Addon,\n      Input,\n      flow,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const schema = {\n          type: 'object',\n          properties: {\n            login: {\n              type: 'string',\n              format: 'email',\n              messages: {\n                required: 'Please enter login',\n                format: 'Wrong format'\n              }\n            },\n            password: {\n              type: 'string',\n              messages: {\n                required: 'Please enter password'\n              }\n            }\n          },\n          required: ['login', 'password']\n        };\n        const validate = makeValidator(schema);\n\n        const FieldError = ({\n          name\n        }) => {\n          const [error] = useErrors(name);\n          return error ? <Addon color=\"warning\" subtitle2 mdxType=\"Addon\">\n          {error.message}\n        </Addon> : null;\n        };\n\n        return <Card rize={1} css={{\n          maxWidth: '450px',\n          margin: '24px auto'\n        }} mdxType=\"Card\">\n        <Form validate={validate} onFormSubmit={flow(Object.entries, console.log)} mdxType=\"Form\">\n          <CardHeader mdxType=\"CardHeader\">Please Sign In</CardHeader>\n          <CardBody mdxType=\"CardBody\">\n            <Input caption=\"Login\" name=\"login\" bgColor=\"paper2\" mdxType=\"Input\" />\n            <FieldError name=\"login\" mdxType=\"FieldError\" />\n            <Divider invisible mdxType=\"Divider\" />\n            <Input caption=\"Password\" name=\"password\" bgColor=\"paper2\" type=\"password\" mdxType=\"Input\" />\n            <FieldError name=\"password\" mdxType=\"FieldError\" />\n          </CardBody>\n          <CardFooter right mdxType=\"CardFooter\">\n            <Button bgColor=\"primary\" type=\"submit\" mdxType=\"Button\">\n              Sign In\n            </Button>\n          </CardFooter>\n        </Form>\n      </Card>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"arguments\"\n    }}>{`Arguments`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`schema - JSON schema object`}</li>\n      <li parentName=\"ul\">{`options - `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/epoberezkin/ajv\"\n        }}>{`ajv`}</a>{` options`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}