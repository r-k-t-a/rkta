{"version":3,"sources":["webpack:///../src/packages/entypo/entypo.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","EmojiSad","entypos","Fragment","useState","Paper","Text","Input","Form","Clipboard","size","search","setSearchState","entypoKeys","Object","keys","slice","filteredEntypoKeys","filter","item","includes","handleChange","Item","name","style","width","height","display","flexDirection","justifyContent","alignItems","marginLeft","marginBottom","key","element","subtitle2","onFormChange","onChange","caption","outline","flexWrap","map","isMDXComponent"],"mappings":"mTAaaA,G,UAAe,S,gNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,QAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,gBADR,gBAGA,sEAAqD,6BAAGC,WAAW,KAAQ,CACvE,KAAQ,2BADyC,UAArD,gEAEoF,6BAAGA,WAAW,KAAQ,CACtG,KAAQ,oDADwE,YAFpF,aAKA,iBAAQ,CACN,GAAM,UADR,UAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,+CAIL,iBAAQ,CACN,GAAM,WADR,WAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,yBAA0BC,SAAO,GAClEL,QACAH,kBACAS,eACAC,aACAC,UACAC,oBACAC,oBACAC,cACAC,YACAC,cACAC,YACAC,uBAZkE,gBAalElB,IAbkE,EAclEH,eAdkE,GAejEO,QAAQ,cACb,YAAC,IAAD,CAAUe,KAAM,GAAIf,QAAQ,cAE1B,iBAAQ,CACN,GAAM,aADR,aAGA,YAAC,IAAD,CAAYE,WAAY,EAAGC,OAAQ,ytDAAswDC,SAAO,GAC9yDL,QACAH,kBACAS,eACAC,aACAC,UACAC,oBACAC,oBACAC,cACAC,YACAC,cACAC,YACAC,uBAZ8yD,gBAa9yDlB,IAb8yD,EAc9yDH,eAd8yD,GAe7yDO,QAAQ,eACZ,WAAM,MACgCS,mBAAS,IAAnCO,EADN,KACcC,EADd,KAEKC,EAAaC,OAAOC,KAAKb,GAASc,MAAM,GAAI,GAC5CC,EAAqBJ,EAAWK,QAAO,SAAAC,GAAI,OAAIA,EAAKC,SAAST,MAE7DU,EAAe,SAAC,GAEhB,IADJV,EACI,EADJA,OAEAC,EAAeD,IAGXW,EAAO,SAACH,EAAMI,GAAP,OAAgB,YAAC,QAAD,CAAOA,KAAK,OAAOC,MAAO,CACrDC,MAAO,QACPC,OAAQ,QACRC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,SACZC,WAAY,OACZC,aAAc,QACbC,IAAKV,EAAM5B,QAAQ,SACrBwB,EAAK,CACFT,KAAM,UAEV,mBAAKc,MAAO,CACRG,QAAS,OACTE,eAAgB,SAChBC,WAAY,WAEd,YAAC,OAAD,CAAMI,QAAQ,KAAKC,WAAS,EAACxC,QAAQ,QAAQ4B,MAI/C,OAAO,YAAC,WAAD,CAAU5B,QAAQ,YACzB,mBAAK6B,MAAO,CACRG,QAAS,OACTF,MAAO,OACPI,eAAgB,SAChBC,WAAY,SACZE,aAAc,SAElB,YAAC,OAAD,CAAMI,aAAcf,EAAc1B,QAAQ,QACxC,YAAC,QAAD,CAAO4B,KAAK,SAASc,SAAUhB,EAAciB,QAAQ,eAAeC,QAAQ,MAAM5C,QAAQ,YAG5F,mBAAK6B,MAAO,CACRG,QAAS,OACTa,SAAU,OACVf,MAAO,OACPI,eAAgB,WAEjBlB,EAASM,EAAmBwB,KAAI,SAAAtB,GAAI,OAAIG,EAAKpB,EAAQiB,GAAOA,MAASN,EAAW4B,KAAI,SAAAtB,GAAI,OAAIG,EAAKpB,EAAQiB,GAAOA,iB,8MAS3H3B,EAAWkD,gBAAiB","file":"component---src-packages-entypo-entypo-mdx-7f11cfb34833873b158c.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/se/www/rkt-a/rkta/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { EmojiSad } from './src';\nimport * as entypos from '@rkta/entypo';\nimport { Fragment, useState } from 'react';\nimport { Paper, Text, Input } from '@rkta/ui';\nimport { Form } from '@rkta/form';\nimport { Clipboard } from '@rkta/entypo';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"entypo-icons\"\n    }}>{`Entypo Icons`}</h1>\n    <p>{`The package is actually a reactjs wrapper for `}<a parentName=\"p\" {...{\n        \"href\": \"http://www.entypo.com/\"\n      }}>{`entypo`}</a>{` pictogram library created by Daniel Bruce distributed under `}<a parentName=\"p\" {...{\n        \"href\": \"https://creativecommons.org/licenses/by-sa/3.0/\"\n      }}>{`CC BY-SA`}</a>{` licence.`}</p>\n    <h2 {...{\n      \"id\": \"import\"\n    }}>{`Import`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { EmojiSad } from '@rkta/entypo';\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <Playground __position={0} __code={'<EmojiSad size={48} />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      EmojiSad,\n      entypos,\n      Fragment,\n      useState,\n      Paper,\n      Text,\n      Input,\n      Form,\n      Clipboard,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <EmojiSad size={48} mdxType=\"EmojiSad\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"all-icons\"\n    }}>{`All Icons`}</h2>\n    <Playground __position={1} __code={'() => {\\n  const [search, setSearchState] = useState(\\'\\')\\n  const entypoKeys = Object.keys(entypos).slice(1, -1)\\n  const filteredEntypoKeys = entypoKeys.filter(item => item.includes(search))\\n  const handleChange = ({ search }) => {\\n    setSearchState(search)\\n  }\\n  const Item = (item, name) => (\\n    <Paper\\n      name=\\\"Test\\\"\\n      style={{\\n        width: \\'150px\\',\\n        height: \\'150px\\',\\n        display: \\'flex\\',\\n        flexDirection: \\'column\\',\\n        justifyContent: \\'center\\',\\n        alignItems: \\'center\\',\\n        marginLeft: \\'80px\\',\\n        marginBottom: \\'15px\\',\\n      }}\\n      key={name}\\n    >\\n      {item({ size: \\'128px\\' })}\\n      <div\\n        style={{\\n          display: \\'flex\\',\\n          justifyContent: \\'center\\',\\n          alignItems: \\'center\\',\\n        }}\\n      >\\n        <Text element=\\\"h1\\\" subtitle2>\\n          {name}\\n        </Text>\\n      </div>\\n    </Paper>\\n  )\\n  return (\\n    <Fragment>\\n      <div\\n        style={{\\n          display: \\'flex\\',\\n          width: \\'100%\\',\\n          justifyContent: \\'center\\',\\n          alignItems: \\'center\\',\\n          marginBottom: \\'40px\\',\\n        }}\\n      >\\n        <Form onFormChange={handleChange}>\\n          <Input\\n            name=\\\"search\\\"\\n            onChange={handleChange}\\n            caption=\\\"Поиск иконки\\\"\\n            outline=\\\"1px\\\"\\n          />\\n        </Form>\\n      </div>\\n      <div\\n        style={{\\n          display: \\'flex\\',\\n          flexWrap: \\'wrap\\',\\n          width: \\'100%\\',\\n          justifyContent: \\'center\\',\\n        }}\\n      >\\n        {search\\n          ? filteredEntypoKeys.map(item => Item(entypos[item], item))\\n          : entypoKeys.map(item => Item(entypos[item], item))}\\n      </div>\\n    </Fragment>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      EmojiSad,\n      entypos,\n      Fragment,\n      useState,\n      Paper,\n      Text,\n      Input,\n      Form,\n      Clipboard,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [search, setSearchState] = useState('');\n        const entypoKeys = Object.keys(entypos).slice(1, -1);\n        const filteredEntypoKeys = entypoKeys.filter(item => item.includes(search));\n\n        const handleChange = ({\n          search\n        }) => {\n          setSearchState(search);\n        };\n\n        const Item = (item, name) => <Paper name=\"Test\" style={{\n          width: '150px',\n          height: '150px',\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'center',\n          alignItems: 'center',\n          marginLeft: '80px',\n          marginBottom: '15px'\n        }} key={name} mdxType=\"Paper\">\n        {item({\n            size: '128px'\n          })}\n        <div style={{\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center'\n          }}>\n          <Text element=\"h1\" subtitle2 mdxType=\"Text\">{name}</Text>\n        </div>\n      </Paper>;\n\n        return <Fragment mdxType=\"Fragment\">\n        <div style={{\n            display: 'flex',\n            width: '100%',\n            justifyContent: 'center',\n            alignItems: 'center',\n            marginBottom: '40px'\n          }}>\n        <Form onFormChange={handleChange} mdxType=\"Form\">\n          <Input name=\"search\" onChange={handleChange} caption=\"Поиск иконки\" outline=\"1px\" mdxType=\"Input\" />\n        </Form>\n        </div>\n        <div style={{\n            display: 'flex',\n            flexWrap: 'wrap',\n            width: '100%',\n            justifyContent: 'center'\n          }}>\n          {search ? filteredEntypoKeys.map(item => Item(entypos[item], item)) : entypoKeys.map(item => Item(entypos[item], item))}\n        </div>\n      </Fragment>;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}