(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{w7rs:function(e,a,n){"use strict";n.r(a),n.d(a,"_frontmatter",(function(){return j})),n.d(a,"default",(function(){return S}));var r=n("Fcif"),t=n("NthX"),o=n.n(t),i=(n("wcNg"),n("eijD")),d=n("+I+c"),s=n("/FXl"),p=n("TjRS"),m=n("ZFoC"),u=n("mXGw"),l=n("edSL"),b=n.n(l),c=n("nbiN"),y=n.n(c),g=n("yIPz"),C=n("r1rD"),w=n("Vln6"),f=n("vjt9"),j=(n("aD51"),{});void 0!==j&&j&&j===Object(j)&&Object.isExtensible(j)&&!j.hasOwnProperty("__filemeta")&&Object.defineProperty(j,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/packages/form/src/Form/Form.mdx"}});x="FieldError";var x,O={_frontmatter:j},v=p.a,F={name:"12yjhf7",styles:"max-width:450px;margin:24px auto;"},h={name:"12yjhf7",styles:"max-width:450px;margin:24px auto;"},B={name:"12yjhf7",styles:"max-width:450px;margin:24px auto;"},T={name:"12yjhf7",styles:"max-width:450px;margin:24px auto;"},I={name:"12yjhf7",styles:"max-width:450px;margin:24px auto;"},P={name:"12yjhf7",styles:"max-width:450px;margin:24px auto;"};function S(e){var a,n,t,l,c,x,S=e.components,_=Object(d.a)(e,["components"]);return Object(s.b)(v,Object(r.a)({},O,_,{components:S,mdxType:"MDXLayout"}),Object(s.b)("h1",{id:"forms"},"Forms"),Object(s.b)("p",null,"Create react forms with no hassle. Yes, literally."),Object(s.b)("p",null,"Features:"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"Automatic form serialization"),Object(s.b)("li",{parentName:"ul"},"Constraint validation (default)"),Object(s.b)("li",{parentName:"ul"},"JSON Schema validation (reccommended)"),Object(s.b)("li",{parentName:"ul"},"Optional automatic form submit"),Object(s.b)("li",{parentName:"ul"},"Multiple submit prevention"),Object(s.b)("li",{parentName:"ul"},"Custom errors")),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"Custom validation (supported)"),Object(s.b)("li",{parentName:"ul"},"Coercion")),Object(s.b)("h2",{id:"basic-usage"},"Basic Usage"),Object(s.b)("p",null,"This example illustrates the automatic form serialization feature.\nWe get the form data without adding any refs or listeners to the form inputs."),Object(s.b)(m.c,{__position:0,__code:'<Card rize={1} css={{ maxWidth: \'450px\', margin: \'24px auto\' }}>\n    <Form\n      onFormSubmit={({ login, password }) =>\n        window.alert(`\nLogin: ${login}\nPassword: ${password}\n      `)\n      }\n    >\n      <CardHeader>Sign In</CardHeader>\n      <CardBody>\n        <Input\n          autoComplete="username"\n          caption="Login"\n          name="login"\n          bgColor="paper2"\n          type="email"\n        />\n        <Divider invisible />\n        <Input\n          autoComplete="current-password"\n          caption="Password"\n          bgColor="paper2"\n          name="password"\n          type="password"\n        />\n      </CardBody>\n      <CardFooter right>\n        <Button bgColor="primary" type="submit">\n          Submit\n        </Button>\n      </CardFooter>\n    </Form>\n  </Card>',__scope:(a={props:_,DefaultLayout:p.a,Playground:m.c,Props:m.d,useState:u.useState,Fragment:u.Fragment,get:b.a,flow:y.a,Form:g.a,useErrors:C.a,makeValidator:w.a,Button:f.Button,Card:f.Card,CardHeader:f.CardHeader,CardBody:f.CardBody,CardFooter:f.CardFooter,Divider:f.Divider,Input:f.Input},a.DefaultLayout=p.a,a._frontmatter=j,a),mdxType:"Playground"},Object(s.b)(f.Card,{rize:1,css:F,mdxType:"Card"},Object(s.b)(g.a,{onFormSubmit:function(e){var a=e.login,n=e.password;return window.alert("\nLogin: "+a+"\nPassword: "+n+"\n      ")},mdxType:"Form"},Object(s.b)(f.CardHeader,{mdxType:"CardHeader"},"Sign In"),Object(s.b)(f.CardBody,{mdxType:"CardBody"},Object(s.b)(f.Input,{autoComplete:"username",caption:"Login",name:"login",bgColor:"paper2",type:"email",mdxType:"Input"}),Object(s.b)(f.Divider,{invisible:!0,mdxType:"Divider"}),Object(s.b)(f.Input,{autoComplete:"current-password",caption:"Password",bgColor:"paper2",name:"password",type:"password",mdxType:"Input"})),Object(s.b)(f.CardFooter,{right:!0,mdxType:"CardFooter"},Object(s.b)(f.Button,{bgColor:"primary",type:"submit",mdxType:"Button"},"Submit"))))),Object(s.b)("h2",{id:"constraint-validation"},"Constraint validation"),Object(s.b)("p",null,"This example illustrates how to validate forms with Constraint validation API."),Object(s.b)(m.c,{__position:1,__code:'<Card rize={1} css={{ maxWidth: \'450px\', margin: \'24px auto\' }}>\n    <Form\n      onFormSubmit={({ login, password }) =>\n        window.alert(`\nLogin: ${login}\nPassword: ${password}\n      `)\n      }\n    >\n      <CardHeader>Sign In</CardHeader>\n      <CardBody>\n        <Input\n          autoComplete="username"\n          caption="Login"\n          name="login"\n          bgColor="paper2"\n          required\n          type="email"\n        />\n        <Divider invisible />\n        <Input\n          autoComplete="current-password"\n          caption="Password"\n          bgColor="paper2"\n          name="password"\n          required\n          type="password"\n        />\n      </CardBody>\n      <CardFooter right>\n        <Button bgColor="primary" type="submit">\n          Submit\n        </Button>\n      </CardFooter>\n    </Form>\n  </Card>',__scope:(n={props:_,DefaultLayout:p.a,Playground:m.c,Props:m.d,useState:u.useState,Fragment:u.Fragment,get:b.a,flow:y.a,Form:g.a,useErrors:C.a,makeValidator:w.a,Button:f.Button,Card:f.Card,CardHeader:f.CardHeader,CardBody:f.CardBody,CardFooter:f.CardFooter,Divider:f.Divider,Input:f.Input},n.DefaultLayout=p.a,n._frontmatter=j,n),mdxType:"Playground"},Object(s.b)(f.Card,{rize:1,css:h,mdxType:"Card"},Object(s.b)(g.a,{onFormSubmit:function(e){var a=e.login,n=e.password;return window.alert("\nLogin: "+a+"\nPassword: "+n+"\n      ")},mdxType:"Form"},Object(s.b)(f.CardHeader,{mdxType:"CardHeader"},"Sign In"),Object(s.b)(f.CardBody,{mdxType:"CardBody"},Object(s.b)(f.Input,{autoComplete:"username",caption:"Login",name:"login",bgColor:"paper2",required:!0,type:"email",mdxType:"Input"}),Object(s.b)(f.Divider,{invisible:!0,mdxType:"Divider"}),Object(s.b)(f.Input,{autoComplete:"current-password",caption:"Password",bgColor:"paper2",name:"password",required:!0,type:"password",mdxType:"Input"})),Object(s.b)(f.CardFooter,{right:!0,mdxType:"CardFooter"},Object(s.b)(f.Button,{bgColor:"primary",type:"submit",mdxType:"Button"},"Submit"))))),Object(s.b)("h2",{id:"schema-validation"},"Schema validation"),Object(s.b)("p",null,"More validation details is here"),Object(s.b)(m.c,{__position:2,__code:'() => {\n    const validate = makeValidator({\n      type: \'object\',\n      properties: {\n        login: {\n          type: \'string\',\n          format: \'email\',\n          messages: {\n            required: \'Please enter login\',\n            format: \'Please enter a valid email\',\n          },\n        },\n        password: {\n          type: \'string\',\n          messages: {\n            required: \'Please enter password\',\n          },\n        },\n      },\n      required: [\'login\', \'password\'],\n    })\n    return (\n      <Card rize={1} css={{ maxWidth: \'450px\', margin: \'24px auto\' }}>\n        <Form\n          validate={validate}\n          onFormSubmit={({ login, password }) =>\n            window.alert(`\nLogin: ${login}\nPassword: ${password}\n      `)\n          }\n        >\n          <CardHeader>Sign In</CardHeader>\n          <CardBody>\n            <Input\n              autoComplete="username"\n              caption="Login"\n              name="login"\n              bgColor="paper2"\n              type="email"\n            />\n            <Divider invisible />\n            <Input\n              autoComplete="current-password"\n              caption="Password"\n              bgColor="paper2"\n              name="password"\n              type="password"\n            />\n          </CardBody>\n          <CardFooter right>\n            <Button bgColor="primary" type="submit">\n              Submit\n            </Button>\n          </CardFooter>\n        </Form>\n      </Card>\n    )\n  }',__scope:(t={props:_,DefaultLayout:p.a,Playground:m.c,Props:m.d,useState:u.useState,Fragment:u.Fragment,get:b.a,flow:y.a,Form:g.a,useErrors:C.a,makeValidator:w.a,Button:f.Button,Card:f.Card,CardHeader:f.CardHeader,CardBody:f.CardBody,CardFooter:f.CardFooter,Divider:f.Divider,Input:f.Input},t.DefaultLayout=p.a,t._frontmatter=j,t),mdxType:"Playground"},(function(){var e=Object(w.a)({type:"object",properties:{login:{type:"string",format:"email",messages:{required:"Please enter login",format:"Please enter a valid email"}},password:{type:"string",messages:{required:"Please enter password"}}},required:["login","password"]});return Object(s.b)(f.Card,{rize:1,css:B,mdxType:"Card"},Object(s.b)(g.a,{validate:e,onFormSubmit:function(e){var a=e.login,n=e.password;return window.alert("\nLogin: "+a+"\nPassword: "+n+"\n      ")},mdxType:"Form"},Object(s.b)(f.CardHeader,{mdxType:"CardHeader"},"Sign In"),Object(s.b)(f.CardBody,{mdxType:"CardBody"},Object(s.b)(f.Input,{autoComplete:"username",caption:"Login",name:"login",bgColor:"paper2",type:"email",mdxType:"Input"}),Object(s.b)(f.Divider,{invisible:!0,mdxType:"Divider"}),Object(s.b)(f.Input,{autoComplete:"current-password",caption:"Password",bgColor:"paper2",name:"password",type:"password",mdxType:"Input"})),Object(s.b)(f.CardFooter,{right:!0,mdxType:"CardFooter"},Object(s.b)(f.Button,{bgColor:"primary",type:"submit",mdxType:"Button"},"Submit"))))})),Object(s.b)("h2",{id:"autosubmit"},"Autosubmit"),Object(s.b)("p",null,"The auto-submit feature is useful when we already have valid data and want to edit it in a live manner."),Object(s.b)("p",null,"If a form has a submit button, then auto-submit may cause usability problems."),Object(s.b)(m.c,{__position:3,__code:'() => {\n  const schema = {\n    type: \'object\',\n    properties: {\n      firstName: {\n        type: \'string\',\n        minLength: 2,\n        maxLength: 8,\n        messages: {\n          required: \'First name is required\',\n        },\n      },\n      lastName: {\n        type: \'string\',\n        minLength: 2,\n        maxLength: 8,\n        messages: {\n          required: \'Last name is required\',\n        },\n      },\n    },\n    required: [\'firstName\', \'lastName\'],\n  }\n  const validate = makeValidator(schema)\n  return (\n    <Card rize={1} css={{ maxWidth: \'450px\', margin: \'24px auto\' }}>\n      <Form autoSubmit validate={validate} onFormSubmit={console.log}>\n        <CardHeader>Edit name</CardHeader>\n        <CardBody>\n          <Input\n            autoComplete="none"\n            bgColor="paper2"\n            caption="First Name"\n            defaultValue="Barack"\n            name="firstName"\n            type="text"\n          />\n          <Divider invisible />\n          <Input\n            autoComplete="none"\n            bgColor="paper2"\n            caption="Last Name"\n            defaultValue="Obama"\n            name="lastName"\n            type="text"\n          />\n        </CardBody>\n      </Form>\n    </Card>\n  )\n}',__scope:(l={props:_,DefaultLayout:p.a,Playground:m.c,Props:m.d,useState:u.useState,Fragment:u.Fragment,get:b.a,flow:y.a,Form:g.a,useErrors:C.a,makeValidator:w.a,Button:f.Button,Card:f.Card,CardHeader:f.CardHeader,CardBody:f.CardBody,CardFooter:f.CardFooter,Divider:f.Divider,Input:f.Input},l.DefaultLayout=p.a,l._frontmatter=j,l),mdxType:"Playground"},(function(){var e=Object(w.a)({type:"object",properties:{firstName:{type:"string",minLength:2,maxLength:8,messages:{required:"First name is required"}},lastName:{type:"string",minLength:2,maxLength:8,messages:{required:"Last name is required"}}},required:["firstName","lastName"]});return Object(s.b)(f.Card,{rize:1,css:T,mdxType:"Card"},Object(s.b)(g.a,{autoSubmit:!0,validate:e,onFormSubmit:console.log,mdxType:"Form"},Object(s.b)(f.CardHeader,{mdxType:"CardHeader"},"Edit name"),Object(s.b)(f.CardBody,{mdxType:"CardBody"},Object(s.b)(f.Input,{autoComplete:"none",bgColor:"paper2",caption:"First Name",defaultValue:"Barack",name:"firstName",type:"text",mdxType:"Input"}),Object(s.b)(f.Divider,{invisible:!0,mdxType:"Divider"}),Object(s.b)(f.Input,{autoComplete:"none",bgColor:"paper2",caption:"Last Name",defaultValue:"Obama",name:"lastName",type:"text",mdxType:"Input"}))))})),Object(s.b)("h2",{id:"busy-state"},"Busy state"),Object(s.b)("p",null,"The form automatically maintains a busy state during validation and submission.\nIt automatically prevents multiple submits when works in manual mode and allows\nmultiple form submissions in ",Object(s.b)("em",{parentName:"p"},"autoSubmit")," mode."),Object(s.b)(m.c,{__position:4,__code:'() => {\n    const validate = makeValidator({\n      type: \'object\',\n      properties: {\n        login: {\n          type: \'string\',\n          format: \'email\',\n          messages: {\n            required: \'Please enter login\',\n            format: \'Please enter a valid email\',\n          },\n        },\n        password: {\n          type: \'string\',\n          messages: {\n            required: \'Please enter password\',\n          },\n        },\n      },\n      required: [\'login\', \'password\'],\n    })\n    function pause() {\n      return new Promise(resolve => setTimeout(resolve, 1000))\n    }\n    async function handleSubmit({ login, password }) {\n      await pause()\n      window.alert(`\nLogin: ${login}\nPassword: ${password}\n      `)\n    }\n    async function handleValidate(formData) {\n      await pause()\n      return validate(formData)\n    }\n    return (\n      <Card rize={1} css={{ maxWidth: \'450px\', margin: \'24px auto\' }}>\n        <Form validate={handleValidate} onFormSubmit={handleSubmit}>\n          {({ formIsBusy }) => (\n            <Fragment>\n              <CardHeader>Sign In</CardHeader>\n              <CardBody>\n                <Input\n                  autoComplete="username"\n                  caption="Login"\n                  name="login"\n                  bgColor="paper2"\n                  type="email"\n                />\n                <Divider invisible />\n                <Input\n                  autoComplete="current-password"\n                  caption="Password"\n                  bgColor="paper2"\n                  name="password"\n                  type="password"\n                />\n              </CardBody>\n              <CardFooter right>\n                <Button bgColor="primary" busy={formIsBusy} type="submit">\n                  Submit\n                </Button>\n              </CardFooter>\n            </Fragment>\n          )}\n        </Form>\n      </Card>\n    )\n  }',__scope:(c={props:_,DefaultLayout:p.a,Playground:m.c,Props:m.d,useState:u.useState,Fragment:u.Fragment,get:b.a,flow:y.a,Form:g.a,useErrors:C.a,makeValidator:w.a,Button:f.Button,Card:f.Card,CardHeader:f.CardHeader,CardBody:f.CardBody,CardFooter:f.CardFooter,Divider:f.Divider,Input:f.Input},c.DefaultLayout=p.a,c._frontmatter=j,c),mdxType:"Playground"},(function(){var e=Object(w.a)({type:"object",properties:{login:{type:"string",format:"email",messages:{required:"Please enter login",format:"Please enter a valid email"}},password:{type:"string",messages:{required:"Please enter password"}}},required:["login","password"]});function a(){return new Promise((function(e){return setTimeout(e,1e3)}))}function n(){return(n=Object(i.a)(o.a.mark((function e(n){var r,t;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=n.login,t=n.password,e.next=3,a();case 3:window.alert("\nLogin: "+r+"\nPassword: "+t+"\n      ");case 4:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function r(){return(r=Object(i.a)(o.a.mark((function n(r){return o.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,a();case 2:return n.abrupt("return",e(r));case 3:case"end":return n.stop()}}),n)})))).apply(this,arguments)}return Object(s.b)(f.Card,{rize:1,css:I,mdxType:"Card"},Object(s.b)(g.a,{validate:function(e){return r.apply(this,arguments)},onFormSubmit:function(e){return n.apply(this,arguments)},mdxType:"Form"},(function(e){var a=e.formIsBusy;return Object(s.b)(u.Fragment,{mdxType:"Fragment"},Object(s.b)(f.CardHeader,{mdxType:"CardHeader"},"Sign In"),Object(s.b)(f.CardBody,{mdxType:"CardBody"},Object(s.b)(f.Input,{autoComplete:"username",caption:"Login",name:"login",bgColor:"paper2",type:"email",mdxType:"Input"}),Object(s.b)(f.Divider,{invisible:!0,mdxType:"Divider"}),Object(s.b)(f.Input,{autoComplete:"current-password",caption:"Password",bgColor:"paper2",name:"password",type:"password",mdxType:"Input"})),Object(s.b)(f.CardFooter,{right:!0,mdxType:"CardFooter"},Object(s.b)(f.Button,{bgColor:"primary",busy:a,type:"submit",mdxType:"Button"},"Submit")))})))})),Object(s.b)("h2",{id:"validation-without-validationapi"},"Validation without ValidationAPI"),Object(s.b)(m.c,{__position:5,__code:'() => {\n    const FieldError = ({ name }) => {\n      const [error] = useErrors(name)\n      if (!error) return null\n      return (\n        <span style={{ color: \'red\', fontSize: 12, paddingLeft: 16 }}>\n          {error.message}\n        </span>\n      )\n    }\n    const validate = makeValidator({\n      type: \'object\',\n      properties: {\n        login: {\n          type: \'string\',\n          format: \'email\',\n          messages: {\n            required: \'Please enter login\',\n            format: \'Please enter a valid email\',\n          },\n        },\n        password: {\n          type: \'string\',\n          messages: {\n            required: \'Please enter password\',\n          },\n        },\n      },\n      required: [\'login\', \'password\'],\n    })\n    return (\n      <Card rize={1} css={{ maxWidth: \'450px\', margin: \'24px auto\' }}>\n        <Form\n          useConstraintValidationAPI={false}\n          validate={validate}\n          onFormSubmit={({ login, password }) =>\n            window.alert(`\nLogin: ${login}\nPassword: ${password}\n      `)\n          }\n        >\n          <CardHeader>Sign In</CardHeader>\n          <CardBody>\n            <Input\n              autoComplete="username"\n              caption="Login"\n              name="login"\n              bgColor="paper2"\n              type="email"\n            />\n            <FieldError name="login" />\n            <Divider invisible />\n            <Input\n              autoComplete="current-password"\n              caption="Password"\n              bgColor="paper2"\n              name="password"\n              type="password"\n            />\n            <FieldError name="password" />\n          </CardBody>\n          <CardFooter right>\n            <Button bgColor="primary" type="submit">\n              Submit\n            </Button>\n          </CardFooter>\n        </Form>\n      </Card>\n    )\n  }',__scope:(x={props:_,DefaultLayout:p.a,Playground:m.c,Props:m.d,useState:u.useState,Fragment:u.Fragment,get:b.a,flow:y.a,Form:g.a,useErrors:C.a,makeValidator:w.a,Button:f.Button,Card:f.Card,CardHeader:f.CardHeader,CardBody:f.CardBody,CardFooter:f.CardFooter,Divider:f.Divider,Input:f.Input},x.DefaultLayout=p.a,x._frontmatter=j,x),mdxType:"Playground"},(function(){var e=function(e){var a=e.name,n=Object(C.a)(a)[0];return n?Object(s.b)("span",{style:{color:"red",fontSize:12,paddingLeft:16}},n.message):null},a=Object(w.a)({type:"object",properties:{login:{type:"string",format:"email",messages:{required:"Please enter login",format:"Please enter a valid email"}},password:{type:"string",messages:{required:"Please enter password"}}},required:["login","password"]});return Object(s.b)(f.Card,{rize:1,css:P,mdxType:"Card"},Object(s.b)(g.a,{useConstraintValidationAPI:!1,validate:a,onFormSubmit:function(e){var a=e.login,n=e.password;return window.alert("\nLogin: "+a+"\nPassword: "+n+"\n      ")},mdxType:"Form"},Object(s.b)(f.CardHeader,{mdxType:"CardHeader"},"Sign In"),Object(s.b)(f.CardBody,{mdxType:"CardBody"},Object(s.b)(f.Input,{autoComplete:"username",caption:"Login",name:"login",bgColor:"paper2",type:"email",mdxType:"Input"}),Object(s.b)(e,{name:"login",mdxType:"FieldError"}),Object(s.b)(f.Divider,{invisible:!0,mdxType:"Divider"}),Object(s.b)(f.Input,{autoComplete:"current-password",caption:"Password",bgColor:"paper2",name:"password",type:"password",mdxType:"Input"}),Object(s.b)(e,{name:"password",mdxType:"FieldError"})),Object(s.b)(f.CardFooter,{right:!0,mdxType:"CardFooter"},Object(s.b)(f.Button,{bgColor:"primary",type:"submit",mdxType:"Button"},"Submit"))))})),Object(s.b)("h2",{id:"props"},"Props"),Object(s.b)(m.d,{of:g.a,mdxType:"Props"}))}void 0!==S&&S&&S===Object(S)&&Object.isExtensible(S)&&!S.hasOwnProperty("__filemeta")&&Object.defineProperty(S,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/packages/form/src/Form/Form.mdx"}}),S.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-packages-form-src-form-form-mdx-8c116593557ecd48e040.js.map