{"version":3,"sources":["webpack:///../src/packages/ui/src/Modal/Modal.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","__position","__code","__scope","Playground","Props","useToggle","flow","Modal","Button","Paper","Card","CardHeader","CardBody","CardFooter","DotsThreeVertical","Addon","Popover","List","ListTitle","ListButton","visible","toggleVisible","ok","console","log","onClick","bgColor","rize","css","onClose","align","fitRight","round","nowrap","color","toString","right","autoFocus","visible1","toggleVisible1","visible2","toggleVisible2","of","isMDXComponent"],"mappings":"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","file":"component---src-packages-ui-src-modal-modal-mdx-ec8fa490e73696141ab6.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/se/www/maintined/rkta/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { useToggle } from '@rkta/hooks';\nimport flow from 'lodash/flow';\nimport { Modal } from './';\nimport { Button } from '../Button';\nimport { Paper } from '../Paper';\nimport { Card, CardHeader, CardBody, CardFooter } from '../Card';\nimport { DotsThreeVertical } from '../../../entypo/src';\nimport { Addon } from '../Addon';\nimport { Popover } from '../Popover';\nimport { List, ListTitle, ListButton } from '../List';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"modal\"\n    }}>{`Modal`}</h1>\n    <p>{`The component provides foundation for creating various modal UI elements.`}</p>\n    <h2 {...{\n      \"id\": \"basic-exampe\"\n    }}>{`Basic Exampe`}</h2>\n    <Playground __position={0} __code={'() => {\\n  const [visible, toggleVisible] = useToggle()\\n  const ok = flow(() => console.log(\\'OK\\'), toggleVisible)\\n  return (\\n    <>\\n      <Button onClick={toggleVisible} bgColor=\\\"primary\\\" rize={1}>\\n        Open modal\\n      </Button>\\n      <Modal\\n        css={{ padding: 40 }}\\n        onClose={toggleVisible}\\n        visible={visible}\\n        align=\\\"top\\\"\\n      >\\n        <Card rize={1} css={{ maxWidth: 560 }}>\\n          <CardHeader fitRight>\\n            CardHeader\\n            <Addon>\\n              <Popover align=\\\"bottomRight\\\">\\n                <Button round>\\n                  <DotsThreeVertical />\\n                </Button>\\n                <List rize={2}>\\n                  <ListTitle>Popover</ListTitle>\\n                  <ListButton nowrap>Menu option 1</ListButton>\\n                  <ListButton nowrap>Menu option 1</ListButton>\\n                </List>\\n              </Popover>\\n            </Addon>\\n          </CardHeader>\\n          <CardBody color=\\\"textSecondary\\\">\\n            <p>\\n              This impressive paella is a perfect party dish and a fun meal to\\n              cook together with your guests. Add 1 cup of frozen peas along\\n              with the mussels, if you like.\\n            </p>\\n            <p>Visible: {visible.toString()}</p>\\n          </CardBody>\\n          <CardFooter right>\\n            <Button onClick={toggleVisible}>Cancel</Button>\\n            <Button autoFocus bgColor=\\\"primary\\\" onClick={ok} rize={2}>\\n              OK\\n            </Button>\\n          </CardFooter>\\n        </Card>\\n      </Modal>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useToggle,\n      flow,\n      Modal,\n      Button,\n      Paper,\n      Card,\n      CardHeader,\n      CardBody,\n      CardFooter,\n      DotsThreeVertical,\n      Addon,\n      Popover,\n      List,\n      ListTitle,\n      ListButton\n    }} mdxType=\"Playground\">\n  {() => {\n        const [visible, toggleVisible] = useToggle();\n        const ok = flow(() => console.log('OK'), toggleVisible);\n        return <>\n        <Button onClick={toggleVisible} bgColor=\"primary\" rize={1} mdxType=\"Button\">\n          Open modal\n        </Button>\n        <Modal css={{\n            padding: 40\n          }} onClose={toggleVisible} visible={visible} align=\"top\" mdxType=\"Modal\">\n          <Card rize={1} css={{\n              maxWidth: 560\n            }} mdxType=\"Card\">\n            <CardHeader fitRight mdxType=\"CardHeader\">\n              CardHeader\n               <Addon mdxType=\"Addon\">\n                 <Popover align=\"bottomRight\" mdxType=\"Popover\">\n                  <Button round mdxType=\"Button\">\n                    <DotsThreeVertical mdxType=\"DotsThreeVertical\" />\n                  </Button>\n                  <List rize={2} mdxType=\"List\">\n                    <ListTitle mdxType=\"ListTitle\">Popover</ListTitle>\n                    <ListButton nowrap mdxType=\"ListButton\">Menu option 1</ListButton>\n                    <ListButton nowrap mdxType=\"ListButton\">Menu option 1</ListButton>\n                  </List>\n                 </Popover>\n               </Addon>\n            </CardHeader>\n            <CardBody color=\"textSecondary\" mdxType=\"CardBody\">\n              <p>\n              This impressive paella is a perfect party dish and a fun meal to cook together with your\n              guests. Add 1 cup of frozen peas along with the mussels, if you like.\n              </p>\n              <p>\n                Visible: {visible.toString()}\n              </p>\n            </CardBody>\n            <CardFooter right mdxType=\"CardFooter\">\n              <Button onClick={toggleVisible} mdxType=\"Button\">Cancel</Button>\n              <Button autoFocus bgColor=\"primary\" onClick={ok} rize={2} mdxType=\"Button\">OK</Button>\n            </CardFooter>\n          </Card>\n        </Modal>\n      </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"concurrency\"\n    }}>{`Concurrency`}</h2>\n    <Playground __position={1} __code={'() => {\\n  const [visible1, toggleVisible1] = useToggle()\\n  const [visible2, toggleVisible2] = useToggle()\\n  return (\\n    <>\\n      <Button onClick={toggleVisible1} bgColor=\\\"primary\\\" rize={1}>\\n        Modal 1\\n      </Button>\\n      <Button onClick={toggleVisible2} bgColor=\\\"primary\\\" rize={1}>\\n        Modal 2\\n      </Button>\\n      <Modal onClose={toggleVisible1} visible={visible1}>\\n        <Card rize={1} css={{ maxWidth: 560 }}>\\n          Modal 1\\n        </Card>\\n      </Modal>\\n      <Modal\\n        css={{ padding: 40 }}\\n        onClose={toggleVisible2}\\n        visible={visible2}\\n        align=\\\"bottom\\\"\\n      >\\n        <Card rize={1} css={{ maxWidth: 560 }}>\\n          Modal 2\\n        </Card>\\n      </Modal>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useToggle,\n      flow,\n      Modal,\n      Button,\n      Paper,\n      Card,\n      CardHeader,\n      CardBody,\n      CardFooter,\n      DotsThreeVertical,\n      Addon,\n      Popover,\n      List,\n      ListTitle,\n      ListButton\n    }} mdxType=\"Playground\">\n  {() => {\n        const [visible1, toggleVisible1] = useToggle();\n        const [visible2, toggleVisible2] = useToggle();\n        return <>\n        <Button onClick={toggleVisible1} bgColor=\"primary\" rize={1} mdxType=\"Button\">\n          Modal 1\n        </Button>\n        <Button onClick={toggleVisible2} bgColor=\"primary\" rize={1} mdxType=\"Button\">\n          Modal 2\n        </Button>\n        <Modal onClose={toggleVisible1} visible={visible1} mdxType=\"Modal\">\n          <Card rize={1} css={{\n              maxWidth: 560\n            }} mdxType=\"Card\">\n            Modal 1\n          </Card>\n        </Modal>\n        <Modal css={{\n            padding: 40\n          }} onClose={toggleVisible2} visible={visible2} align=\"bottom\" mdxType=\"Modal\">\n          <Card rize={1} css={{\n              maxWidth: 560\n            }} mdxType=\"Card\">\n            Modal 2\n          </Card>\n        </Modal>\n      </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Modal} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}