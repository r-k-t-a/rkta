{"version":3,"sources":["webpack:///../src/packages/ui/src/Cache/Cache.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","__position","__code","__scope","useState","Playground","Props","Button","Cache","Divider","cnt","setCnt","cacheState","setCacheState","rounded","hardRight","outline","outlineColor","bgColor","onClick","hardLeft","css","disabled","of","isMDXComponent"],"mappings":"wSAWaA,G,UAAe,S,qNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,I,6CACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,SADR,SAGA,mIACA,iBAAQ,CACN,GAAM,YADR,YAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,q3BAA83BC,SAAO,GACt6BJ,QACAH,kBACAQ,oBACAC,eACAC,UACAC,WACAC,UACAC,aARs6B,gBASt6Bb,IATs6B,EAUt6BH,eAVs6B,GAWr6BO,QAAQ,eACZ,WAAM,MACqBI,mBAAS,GAAxBM,EADN,KACWC,EADX,OAEmCP,oBAAS,GAAtCQ,EAFN,KAEkBC,EAFlB,KAGD,OAAO,gCACP,YAAC,IAAD,CAAQC,SAAO,EAACC,WAAS,EAACC,QAAS,EAAGC,aAAa,UAAUC,QAASN,EAAa,UAAY,QAASO,QAAS,kBAAMN,GAAc,IAAOb,QAAQ,UAApJ,MAGA,YAAC,IAAD,CAAQc,SAAO,EAACM,UAAQ,EAACJ,QAAS,EAAGC,aAAa,UAAUC,QAASN,EAAa,QAAU,UAAWO,QAAS,kBAAMN,GAAc,IAAQb,QAAQ,UAApJ,OAGA,YAAC,IAAD,CAAQkB,QAAQ,UAAUG,IAAG,EAExBP,SAAO,EAACK,QAAS,kBAAMR,EAAOD,EAAM,IAAIV,QAAQ,UAFrD,YAGYU,GAEZ,YAAC,IAAD,CAASV,QAAQ,YACjB,YAAC,IAAD,CAAOsB,UAAWV,EAAYZ,QAAQ,SAAtC,WACWU,OAKf,iBAAQ,CACN,GAAM,SADR,SAGA,YAAC,IAAD,CAAOa,GAAIf,IAAOR,QAAQ,gB,mNAK9BH,EAAW2B,gBAAiB","file":"component---src-packages-ui-src-cache-cache-mdx-796ec23af08014566d14.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/se/www/rkt-a/rkta/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { useState } from 'react';\nimport { Playground, Props } from 'docz';\nimport { Button } from '../Button';\nimport { Cache } from './Cache';\nimport { Divider } from '../Divider';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"cache\"\n    }}>{`Cache`}</h1>\n    <p>{`Cache component allows to freeze react render subtree at runtime. We use it to freeze animated components.`}</p>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <Playground __position={0} __code={'() => {\\n  const [cnt, setCnt] = useState(0)\\n  const [cacheState, setCacheState] = useState(false)\\n  return (\\n    <>\\n      <Button\\n        rounded\\n        hardRight\\n        outline={1}\\n        outlineColor=\\\"primary\\\"\\n        bgColor={cacheState ? \\'primary\\' : \\'paper\\'}\\n        onClick={() => setCacheState(true)}\\n      >\\n        On\\n      </Button>\\n      <Button\\n        rounded\\n        hardLeft\\n        outline={1}\\n        outlineColor=\\\"primary\\\"\\n        bgColor={cacheState ? \\'paper\\' : \\'primary\\'}\\n        onClick={() => setCacheState(false)}\\n      >\\n        Off\\n      </Button>\\n      <Button\\n        bgColor=\\\"primary\\\"\\n        css={{ marginLeft: 8 }}\\n        rounded\\n        onClick={() => setCnt(cnt + 1)}\\n      >\\n        Counter: {cnt}\\n      </Button>\\n      <Divider />\\n      <Cache disabled={!cacheState}>Cached: {cnt}</Cache>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useState,\n      Playground,\n      Props,\n      Button,\n      Cache,\n      Divider,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [cnt, setCnt] = useState(0);\n        const [cacheState, setCacheState] = useState(false);\n        return <>\n        <Button rounded hardRight outline={1} outlineColor=\"primary\" bgColor={cacheState ? 'primary' : 'paper'} onClick={() => setCacheState(true)} mdxType=\"Button\">\n          On\n        </Button>\n        <Button rounded hardLeft outline={1} outlineColor=\"primary\" bgColor={cacheState ? 'paper' : 'primary'} onClick={() => setCacheState(false)} mdxType=\"Button\">\n          Off\n        </Button>\n        <Button bgColor=\"primary\" css={{\n            marginLeft: 8\n          }} rounded onClick={() => setCnt(cnt + 1)} mdxType=\"Button\">\n          Counter: {cnt}\n        </Button>\n        <Divider mdxType=\"Divider\" />\n        <Cache disabled={!cacheState} mdxType=\"Cache\">\n          Cached: {cnt}\n        </Cache>\n      </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Cache} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}