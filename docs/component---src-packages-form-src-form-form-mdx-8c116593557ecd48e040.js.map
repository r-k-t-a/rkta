{"version":3,"sources":["webpack:///../src/packages/form/src/Form/Form.mdx"],"names":["_frontmatter","name","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","useState","Fragment","get","flow","Form","useErrors","makeValidator","Button","Card","CardHeader","CardBody","CardFooter","Divider","Input","rize","css","onFormSubmit","login","password","window","alert","autoComplete","caption","bgColor","type","invisible","right","required","validate","properties","format","messages","firstName","minLength","maxLength","lastName","autoSubmit","console","log","defaultValue","pause","Promise","resolve","setTimeout","a","formData","formIsBusy","busy","FieldError","error","style","color","fontSize","paddingLeft","message","useConstraintValidationAPI","of","isMDXComponent"],"mappings":"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","file":"component---src-packages-form-src-form-form-mdx-8c116593557ecd48e040.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/se/www/rkt-a/rkta/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { useState, Fragment } from 'react';\nimport get from 'lodash/get';\nimport flow from 'lodash/flow';\nimport { Form } from './Form';\nimport { useErrors } from './useErrors';\nimport { makeValidator } from '../validator';\nimport { Button, Card, CardHeader, CardBody, CardFooter, Divider, Input } from '@rkta/ui';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst FieldError = makeShortcode(\"FieldError\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"forms\"\n    }}>{`Forms`}</h1>\n    <p>{`Create react forms with no hassle. Yes, literally.`}</p>\n    <p>{`Features:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Automatic form serialization`}</li>\n      <li parentName=\"ul\">{`Constraint validation (default)`}</li>\n      <li parentName=\"ul\">{`JSON Schema validation (reccommended)`}</li>\n      <li parentName=\"ul\">{`Optional automatic form submit`}</li>\n      <li parentName=\"ul\">{`Multiple submit prevention`}</li>\n      <li parentName=\"ul\">{`Custom errors`}</li>\n    </ul>\n    <ul>\n      <li parentName=\"ul\">{`Custom validation (supported)`}</li>\n      <li parentName=\"ul\">{`Coercion`}</li>\n    </ul>\n    {\n      /* @rkta/form does not force you to place any listeners or refs on all the inputs. */\n    }\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic Usage`}</h2>\n    <p>{`This example illustrates the automatic form serialization feature.\nWe get the form data without adding any refs or listeners to the form inputs.`}</p>\n    <Playground __position={0} __code={'<Card rize={1} css={{ maxWidth: \\'450px\\', margin: \\'24px auto\\' }}>\\n    <Form\\n      onFormSubmit={({ login, password }) =>\\n        window.alert(`\\nLogin: ${login}\\nPassword: ${password}\\n      `)\\n      }\\n    >\\n      <CardHeader>Sign In</CardHeader>\\n      <CardBody>\\n        <Input\\n          autoComplete=\\\"username\\\"\\n          caption=\\\"Login\\\"\\n          name=\\\"login\\\"\\n          bgColor=\\\"paper2\\\"\\n          type=\\\"email\\\"\\n        />\\n        <Divider invisible />\\n        <Input\\n          autoComplete=\\\"current-password\\\"\\n          caption=\\\"Password\\\"\\n          bgColor=\\\"paper2\\\"\\n          name=\\\"password\\\"\\n          type=\\\"password\\\"\\n        />\\n      </CardBody>\\n      <CardFooter right>\\n        <Button bgColor=\\\"primary\\\" type=\\\"submit\\\">\\n          Submit\\n        </Button>\\n      </CardFooter>\\n    </Form>\\n  </Card>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      Fragment,\n      get,\n      flow,\n      Form,\n      useErrors,\n      makeValidator,\n      Button,\n      Card,\n      CardHeader,\n      CardBody,\n      CardFooter,\n      Divider,\n      Input,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Card rize={1} css={{\n        maxWidth: '450px',\n        margin: '24px auto'\n      }} mdxType=\"Card\">\n    <Form onFormSubmit={({\n          login,\n          password\n        }) => window.alert(`\nLogin: ${login}\nPassword: ${password}\n      `)} mdxType=\"Form\">\n      <CardHeader mdxType=\"CardHeader\">Sign In</CardHeader>\n      <CardBody mdxType=\"CardBody\">\n        <Input autoComplete=\"username\" caption=\"Login\" name=\"login\" bgColor=\"paper2\" type=\"email\" mdxType=\"Input\" />\n        <Divider invisible mdxType=\"Divider\" />\n        <Input autoComplete=\"current-password\" caption=\"Password\" bgColor=\"paper2\" name=\"password\" type=\"password\" mdxType=\"Input\" />\n      </CardBody>\n      <CardFooter right mdxType=\"CardFooter\">\n        <Button bgColor=\"primary\" type=\"submit\" mdxType=\"Button\">\n          Submit\n        </Button>\n      </CardFooter>\n    </Form>\n  </Card>\n    </Playground>\n    <h2 {...{\n      \"id\": \"constraint-validation\"\n    }}>{`Constraint validation`}</h2>\n    <p>{`This example illustrates how to validate forms with Constraint validation API.`}</p>\n    <Playground __position={1} __code={'<Card rize={1} css={{ maxWidth: \\'450px\\', margin: \\'24px auto\\' }}>\\n    <Form\\n      onFormSubmit={({ login, password }) =>\\n        window.alert(`\\nLogin: ${login}\\nPassword: ${password}\\n      `)\\n      }\\n    >\\n      <CardHeader>Sign In</CardHeader>\\n      <CardBody>\\n        <Input\\n          autoComplete=\\\"username\\\"\\n          caption=\\\"Login\\\"\\n          name=\\\"login\\\"\\n          bgColor=\\\"paper2\\\"\\n          required\\n          type=\\\"email\\\"\\n        />\\n        <Divider invisible />\\n        <Input\\n          autoComplete=\\\"current-password\\\"\\n          caption=\\\"Password\\\"\\n          bgColor=\\\"paper2\\\"\\n          name=\\\"password\\\"\\n          required\\n          type=\\\"password\\\"\\n        />\\n      </CardBody>\\n      <CardFooter right>\\n        <Button bgColor=\\\"primary\\\" type=\\\"submit\\\">\\n          Submit\\n        </Button>\\n      </CardFooter>\\n    </Form>\\n  </Card>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      Fragment,\n      get,\n      flow,\n      Form,\n      useErrors,\n      makeValidator,\n      Button,\n      Card,\n      CardHeader,\n      CardBody,\n      CardFooter,\n      Divider,\n      Input,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Card rize={1} css={{\n        maxWidth: '450px',\n        margin: '24px auto'\n      }} mdxType=\"Card\">\n    <Form onFormSubmit={({\n          login,\n          password\n        }) => window.alert(`\nLogin: ${login}\nPassword: ${password}\n      `)} mdxType=\"Form\">\n      <CardHeader mdxType=\"CardHeader\">Sign In</CardHeader>\n      <CardBody mdxType=\"CardBody\">\n        <Input autoComplete=\"username\" caption=\"Login\" name=\"login\" bgColor=\"paper2\" required type=\"email\" mdxType=\"Input\" />\n        <Divider invisible mdxType=\"Divider\" />\n        <Input autoComplete=\"current-password\" caption=\"Password\" bgColor=\"paper2\" name=\"password\" required type=\"password\" mdxType=\"Input\" />\n      </CardBody>\n      <CardFooter right mdxType=\"CardFooter\">\n        <Button bgColor=\"primary\" type=\"submit\" mdxType=\"Button\">\n          Submit\n        </Button>\n      </CardFooter>\n    </Form>\n  </Card>\n    </Playground>\n    <h2 {...{\n      \"id\": \"schema-validation\"\n    }}>{`Schema validation`}</h2>\n    <p>{`More validation details is here`}</p>\n    <Playground __position={2} __code={'() => {\\n    const validate = makeValidator({\\n      type: \\'object\\',\\n      properties: {\\n        login: {\\n          type: \\'string\\',\\n          format: \\'email\\',\\n          messages: {\\n            required: \\'Please enter login\\',\\n            format: \\'Please enter a valid email\\',\\n          },\\n        },\\n        password: {\\n          type: \\'string\\',\\n          messages: {\\n            required: \\'Please enter password\\',\\n          },\\n        },\\n      },\\n      required: [\\'login\\', \\'password\\'],\\n    })\\n    return (\\n      <Card rize={1} css={{ maxWidth: \\'450px\\', margin: \\'24px auto\\' }}>\\n        <Form\\n          validate={validate}\\n          onFormSubmit={({ login, password }) =>\\n            window.alert(`\\nLogin: ${login}\\nPassword: ${password}\\n      `)\\n          }\\n        >\\n          <CardHeader>Sign In</CardHeader>\\n          <CardBody>\\n            <Input\\n              autoComplete=\\\"username\\\"\\n              caption=\\\"Login\\\"\\n              name=\\\"login\\\"\\n              bgColor=\\\"paper2\\\"\\n              type=\\\"email\\\"\\n            />\\n            <Divider invisible />\\n            <Input\\n              autoComplete=\\\"current-password\\\"\\n              caption=\\\"Password\\\"\\n              bgColor=\\\"paper2\\\"\\n              name=\\\"password\\\"\\n              type=\\\"password\\\"\\n            />\\n          </CardBody>\\n          <CardFooter right>\\n            <Button bgColor=\\\"primary\\\" type=\\\"submit\\\">\\n              Submit\\n            </Button>\\n          </CardFooter>\\n        </Form>\\n      </Card>\\n    )\\n  }'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      Fragment,\n      get,\n      flow,\n      Form,\n      useErrors,\n      makeValidator,\n      Button,\n      Card,\n      CardHeader,\n      CardBody,\n      CardFooter,\n      Divider,\n      Input,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const validate = makeValidator({\n          type: 'object',\n          properties: {\n            login: {\n              type: 'string',\n              format: 'email',\n              messages: {\n                required: 'Please enter login',\n                format: 'Please enter a valid email'\n              }\n            },\n            password: {\n              type: 'string',\n              messages: {\n                required: 'Please enter password'\n              }\n            }\n          },\n          required: ['login', 'password']\n        });\n        return <Card rize={1} css={{\n          maxWidth: '450px',\n          margin: '24px auto'\n        }} mdxType=\"Card\">\n        <Form validate={validate} onFormSubmit={({\n            login,\n            password\n          }) => window.alert(`\nLogin: ${login}\nPassword: ${password}\n      `)} mdxType=\"Form\">\n          <CardHeader mdxType=\"CardHeader\">Sign In</CardHeader>\n          <CardBody mdxType=\"CardBody\">\n            <Input autoComplete=\"username\" caption=\"Login\" name=\"login\" bgColor=\"paper2\" type=\"email\" mdxType=\"Input\" />\n            <Divider invisible mdxType=\"Divider\" />\n            <Input autoComplete=\"current-password\" caption=\"Password\" bgColor=\"paper2\" name=\"password\" type=\"password\" mdxType=\"Input\" />\n          </CardBody>\n          <CardFooter right mdxType=\"CardFooter\">\n            <Button bgColor=\"primary\" type=\"submit\" mdxType=\"Button\">\n              Submit\n            </Button>\n          </CardFooter>\n        </Form>\n      </Card>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"autosubmit\"\n    }}>{`Autosubmit`}</h2>\n    <p>{`The auto-submit feature is useful when we already have valid data and want to edit it in a live manner.`}</p>\n    <p>{`If a form has a submit button, then auto-submit may cause usability problems.`}</p>\n    <Playground __position={3} __code={'() => {\\n  const schema = {\\n    type: \\'object\\',\\n    properties: {\\n      firstName: {\\n        type: \\'string\\',\\n        minLength: 2,\\n        maxLength: 8,\\n        messages: {\\n          required: \\'First name is required\\',\\n        },\\n      },\\n      lastName: {\\n        type: \\'string\\',\\n        minLength: 2,\\n        maxLength: 8,\\n        messages: {\\n          required: \\'Last name is required\\',\\n        },\\n      },\\n    },\\n    required: [\\'firstName\\', \\'lastName\\'],\\n  }\\n  const validate = makeValidator(schema)\\n  return (\\n    <Card rize={1} css={{ maxWidth: \\'450px\\', margin: \\'24px auto\\' }}>\\n      <Form autoSubmit validate={validate} onFormSubmit={console.log}>\\n        <CardHeader>Edit name</CardHeader>\\n        <CardBody>\\n          <Input\\n            autoComplete=\\\"none\\\"\\n            bgColor=\\\"paper2\\\"\\n            caption=\\\"First Name\\\"\\n            defaultValue=\\\"Barack\\\"\\n            name=\\\"firstName\\\"\\n            type=\\\"text\\\"\\n          />\\n          <Divider invisible />\\n          <Input\\n            autoComplete=\\\"none\\\"\\n            bgColor=\\\"paper2\\\"\\n            caption=\\\"Last Name\\\"\\n            defaultValue=\\\"Obama\\\"\\n            name=\\\"lastName\\\"\\n            type=\\\"text\\\"\\n          />\\n        </CardBody>\\n      </Form>\\n    </Card>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      Fragment,\n      get,\n      flow,\n      Form,\n      useErrors,\n      makeValidator,\n      Button,\n      Card,\n      CardHeader,\n      CardBody,\n      CardFooter,\n      Divider,\n      Input,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const schema = {\n          type: 'object',\n          properties: {\n            firstName: {\n              type: 'string',\n              minLength: 2,\n              maxLength: 8,\n              messages: {\n                required: 'First name is required'\n              }\n            },\n            lastName: {\n              type: 'string',\n              minLength: 2,\n              maxLength: 8,\n              messages: {\n                required: 'Last name is required'\n              }\n            }\n          },\n          required: ['firstName', 'lastName']\n        };\n        const validate = makeValidator(schema);\n        return <Card rize={1} css={{\n          maxWidth: '450px',\n          margin: '24px auto'\n        }} mdxType=\"Card\">\n        <Form autoSubmit validate={validate} onFormSubmit={console.log} mdxType=\"Form\">\n          <CardHeader mdxType=\"CardHeader\">Edit name</CardHeader>\n          <CardBody mdxType=\"CardBody\">\n            <Input autoComplete=\"none\" bgColor=\"paper2\" caption=\"First Name\" defaultValue=\"Barack\" name=\"firstName\" type=\"text\" mdxType=\"Input\" />\n            <Divider invisible mdxType=\"Divider\" />\n            <Input autoComplete=\"none\" bgColor=\"paper2\" caption=\"Last Name\" defaultValue=\"Obama\" name=\"lastName\" type=\"text\" mdxType=\"Input\" />\n          </CardBody>\n        </Form>\n      </Card>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"busy-state\"\n    }}>{`Busy state`}</h2>\n    <p>{`The form automatically maintains a busy state during validation and submission.\nIt automatically prevents multiple submits when works in manual mode and allows\nmultiple form submissions in `}<em parentName=\"p\">{`autoSubmit`}</em>{` mode.`}</p>\n    <Playground __position={4} __code={'() => {\\n    const validate = makeValidator({\\n      type: \\'object\\',\\n      properties: {\\n        login: {\\n          type: \\'string\\',\\n          format: \\'email\\',\\n          messages: {\\n            required: \\'Please enter login\\',\\n            format: \\'Please enter a valid email\\',\\n          },\\n        },\\n        password: {\\n          type: \\'string\\',\\n          messages: {\\n            required: \\'Please enter password\\',\\n          },\\n        },\\n      },\\n      required: [\\'login\\', \\'password\\'],\\n    })\\n    function pause() {\\n      return new Promise(resolve => setTimeout(resolve, 1000))\\n    }\\n    async function handleSubmit({ login, password }) {\\n      await pause()\\n      window.alert(`\\nLogin: ${login}\\nPassword: ${password}\\n      `)\\n    }\\n    async function handleValidate(formData) {\\n      await pause()\\n      return validate(formData)\\n    }\\n    return (\\n      <Card rize={1} css={{ maxWidth: \\'450px\\', margin: \\'24px auto\\' }}>\\n        <Form validate={handleValidate} onFormSubmit={handleSubmit}>\\n          {({ formIsBusy }) => (\\n            <Fragment>\\n              <CardHeader>Sign In</CardHeader>\\n              <CardBody>\\n                <Input\\n                  autoComplete=\\\"username\\\"\\n                  caption=\\\"Login\\\"\\n                  name=\\\"login\\\"\\n                  bgColor=\\\"paper2\\\"\\n                  type=\\\"email\\\"\\n                />\\n                <Divider invisible />\\n                <Input\\n                  autoComplete=\\\"current-password\\\"\\n                  caption=\\\"Password\\\"\\n                  bgColor=\\\"paper2\\\"\\n                  name=\\\"password\\\"\\n                  type=\\\"password\\\"\\n                />\\n              </CardBody>\\n              <CardFooter right>\\n                <Button bgColor=\\\"primary\\\" busy={formIsBusy} type=\\\"submit\\\">\\n                  Submit\\n                </Button>\\n              </CardFooter>\\n            </Fragment>\\n          )}\\n        </Form>\\n      </Card>\\n    )\\n  }'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      Fragment,\n      get,\n      flow,\n      Form,\n      useErrors,\n      makeValidator,\n      Button,\n      Card,\n      CardHeader,\n      CardBody,\n      CardFooter,\n      Divider,\n      Input,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const validate = makeValidator({\n          type: 'object',\n          properties: {\n            login: {\n              type: 'string',\n              format: 'email',\n              messages: {\n                required: 'Please enter login',\n                format: 'Please enter a valid email'\n              }\n            },\n            password: {\n              type: 'string',\n              messages: {\n                required: 'Please enter password'\n              }\n            }\n          },\n          required: ['login', 'password']\n        });\n\n        function pause() {\n          return new Promise(resolve => setTimeout(resolve, 1000));\n        }\n\n        async function handleSubmit({\n          login,\n          password\n        }) {\n          await pause();\n          window.alert(`\nLogin: ${login}\nPassword: ${password}\n      `);\n        }\n\n        async function handleValidate(formData) {\n          await pause();\n          return validate(formData);\n        }\n\n        return <Card rize={1} css={{\n          maxWidth: '450px',\n          margin: '24px auto'\n        }} mdxType=\"Card\">\n        <Form validate={handleValidate} onFormSubmit={handleSubmit} mdxType=\"Form\">\n          {({\n              formIsBusy\n            }) => <Fragment mdxType=\"Fragment\">\n              <CardHeader mdxType=\"CardHeader\">Sign In</CardHeader>\n              <CardBody mdxType=\"CardBody\">\n                <Input autoComplete=\"username\" caption=\"Login\" name=\"login\" bgColor=\"paper2\" type=\"email\" mdxType=\"Input\" />\n                <Divider invisible mdxType=\"Divider\" />\n                <Input autoComplete=\"current-password\" caption=\"Password\" bgColor=\"paper2\" name=\"password\" type=\"password\" mdxType=\"Input\" />\n              </CardBody>\n              <CardFooter right mdxType=\"CardFooter\">\n                <Button bgColor=\"primary\" busy={formIsBusy} type=\"submit\" mdxType=\"Button\">\n                  Submit\n                </Button>\n              </CardFooter>\n            </Fragment>}\n        </Form>\n      </Card>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"validation-without-validationapi\"\n    }}>{`Validation without ValidationAPI`}</h2>\n    <Playground __position={5} __code={'() => {\\n    const FieldError = ({ name }) => {\\n      const [error] = useErrors(name)\\n      if (!error) return null\\n      return (\\n        <span style={{ color: \\'red\\', fontSize: 12, paddingLeft: 16 }}>\\n          {error.message}\\n        </span>\\n      )\\n    }\\n    const validate = makeValidator({\\n      type: \\'object\\',\\n      properties: {\\n        login: {\\n          type: \\'string\\',\\n          format: \\'email\\',\\n          messages: {\\n            required: \\'Please enter login\\',\\n            format: \\'Please enter a valid email\\',\\n          },\\n        },\\n        password: {\\n          type: \\'string\\',\\n          messages: {\\n            required: \\'Please enter password\\',\\n          },\\n        },\\n      },\\n      required: [\\'login\\', \\'password\\'],\\n    })\\n    return (\\n      <Card rize={1} css={{ maxWidth: \\'450px\\', margin: \\'24px auto\\' }}>\\n        <Form\\n          useConstraintValidationAPI={false}\\n          validate={validate}\\n          onFormSubmit={({ login, password }) =>\\n            window.alert(`\\nLogin: ${login}\\nPassword: ${password}\\n      `)\\n          }\\n        >\\n          <CardHeader>Sign In</CardHeader>\\n          <CardBody>\\n            <Input\\n              autoComplete=\\\"username\\\"\\n              caption=\\\"Login\\\"\\n              name=\\\"login\\\"\\n              bgColor=\\\"paper2\\\"\\n              type=\\\"email\\\"\\n            />\\n            <FieldError name=\\\"login\\\" />\\n            <Divider invisible />\\n            <Input\\n              autoComplete=\\\"current-password\\\"\\n              caption=\\\"Password\\\"\\n              bgColor=\\\"paper2\\\"\\n              name=\\\"password\\\"\\n              type=\\\"password\\\"\\n            />\\n            <FieldError name=\\\"password\\\" />\\n          </CardBody>\\n          <CardFooter right>\\n            <Button bgColor=\\\"primary\\\" type=\\\"submit\\\">\\n              Submit\\n            </Button>\\n          </CardFooter>\\n        </Form>\\n      </Card>\\n    )\\n  }'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      Fragment,\n      get,\n      flow,\n      Form,\n      useErrors,\n      makeValidator,\n      Button,\n      Card,\n      CardHeader,\n      CardBody,\n      CardFooter,\n      Divider,\n      Input,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const FieldError = ({\n          name\n        }) => {\n          const [error] = useErrors(name);\n          if (!error) return null;\n          return <span style={{\n            color: 'red',\n            fontSize: 12,\n            paddingLeft: 16\n          }}>{error.message}</span>;\n        };\n\n        const validate = makeValidator({\n          type: 'object',\n          properties: {\n            login: {\n              type: 'string',\n              format: 'email',\n              messages: {\n                required: 'Please enter login',\n                format: 'Please enter a valid email'\n              }\n            },\n            password: {\n              type: 'string',\n              messages: {\n                required: 'Please enter password'\n              }\n            }\n          },\n          required: ['login', 'password']\n        });\n        return <Card rize={1} css={{\n          maxWidth: '450px',\n          margin: '24px auto'\n        }} mdxType=\"Card\">\n        <Form useConstraintValidationAPI={false} validate={validate} onFormSubmit={({\n            login,\n            password\n          }) => window.alert(`\nLogin: ${login}\nPassword: ${password}\n      `)} mdxType=\"Form\">\n          <CardHeader mdxType=\"CardHeader\">Sign In</CardHeader>\n          <CardBody mdxType=\"CardBody\">\n            <Input autoComplete=\"username\" caption=\"Login\" name=\"login\" bgColor=\"paper2\" type=\"email\" mdxType=\"Input\" />\n            <FieldError name=\"login\" mdxType=\"FieldError\" />\n            <Divider invisible mdxType=\"Divider\" />\n            <Input autoComplete=\"current-password\" caption=\"Password\" bgColor=\"paper2\" name=\"password\" type=\"password\" mdxType=\"Input\" />\n            <FieldError name=\"password\" mdxType=\"FieldError\" />\n          </CardBody>\n          <CardFooter right mdxType=\"CardFooter\">\n            <Button bgColor=\"primary\" type=\"submit\" mdxType=\"Button\">\n              Submit\n            </Button>\n          </CardFooter>\n        </Form>\n      </Card>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Form} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}