{"version":3,"sources":["webpack:///../src/packages/ui/src/ScrollBox/ScrollBox.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","__position","__code","__scope","useState","Playground","Props","Range","ScrollBox","Button","Divider","Paper","x","bgColor","map","item","center","size","css","key","hideScrollbars","y","snap","visible","setVisible","onClick","invisible","animateHeight","of","isMDXComponent"],"mappings":"yUAWaA,G,UAAe,S,6NAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,I,qWACH,SAASC,EAAT,GAGZ,YAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,aADR,aAGA,qEACA,iBAAQ,CACN,GAAM,YADR,YAGA,iBAAQ,CACN,GAAM,cADR,cAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,+QAAoRC,SAAO,GAC5TJ,QACAH,kBACAQ,oBACAC,eACAC,UACAC,UACAC,cACAC,WACAC,YACAC,WAV4T,gBAW5Tf,IAX4T,EAY5TH,eAZ4T,GAa3TO,QAAQ,cACb,YAAC,IAAD,CAAWY,GAAC,EAACC,QAAQ,UAAUb,QAAQ,aACpCO,IAAM,EAAG,IAAIO,KAAI,SAAAC,GAAI,OAAI,YAAC,IAAD,CAAOF,QAAQ,UAAUG,QAAM,EAACC,KAAM,GAAIC,IAAG,EAIhEC,IAAKJ,EAAMf,QAAQ,SACrBe,QAIL,iBAAQ,CACN,GAAM,YADR,YAGA,YAAC,IAAD,CAAYd,WAAY,EAAGC,OAAQ,gZAAyZC,SAAO,GACjcJ,QACAH,kBACAQ,oBACAC,eACAC,UACAC,UACAC,cACAC,WACAC,YACAC,WAVic,gBAWjcf,IAXic,EAYjcH,eAZic,GAahcO,QAAQ,cACb,YAAC,IAAD,CAAWoB,gBAAc,EAACC,GAAC,EAACH,IAAG,EAMxBlB,QAAQ,aACZO,IAAM,EAAG,IAAIO,KAAI,SAAAC,GAAI,OAAI,YAAC,IAAD,CAAOF,QAAQ,UAAUG,QAAM,EAACC,KAAM,GAAIC,IAAG,EAIhEC,IAAKJ,EAAMf,QAAQ,SACrBe,QAIL,iBAAQ,CACN,GAAM,mBADR,mBAGA,YAAC,IAAD,CAAYd,WAAY,EAAGC,OAAQ,4SAAiTC,SAAO,GACzVJ,QACAH,kBACAQ,oBACAC,eACAC,UACAC,UACAC,cACAC,WACAC,YACAC,WAVyV,gBAWzVf,IAXyV,EAYzVH,eAZyV,GAaxVO,QAAQ,cACb,YAAC,IAAD,CAAWY,GAAC,EAACQ,gBAAc,EAACE,MAAI,EAACtB,QAAQ,aACtCO,IAAM,EAAG,IAAIO,KAAI,SAAAC,GAAI,OAAI,YAAC,IAAD,CAAOF,QAAO,QAAUE,EAAQC,QAAM,EAACE,IAAG,EAI7DC,IAAKJ,EAAMf,QAAQ,SACrBe,QAIL,iBAAQ,CACN,GAAM,0BADR,0BAGA,YAAC,IAAD,CAAYd,WAAY,EAAGC,OAAQ,mZAAsZC,SAAO,GAC9bJ,QACAH,kBACAQ,oBACAC,eACAC,UACAC,UACAC,cACAC,WACAC,YACAC,WAV8b,gBAW9bf,IAX8b,EAY9bH,eAZ8b,GAa7bO,QAAQ,eACZ,WAAM,MAC6BI,oBAAS,GAAhCmB,EADN,KACeC,EADf,KAED,OAAO,gCACP,YAAC,IAAD,CAAQC,QAAS,kBAAMD,GAAYD,IAAUV,QAAQ,UAAUb,QAAQ,UAAvE,kBACA,YAAC,IAAD,CAAS0B,WAAS,EAAC1B,QAAQ,YAC3B,YAAC,IAAD,CAAW2B,eAAa,EAACJ,QAASA,EAASL,IAAG,EAEzClB,QAAQ,aAFb,wBAQJ,iBAAQ,CACN,GAAM,SADR,SAGA,YAAC,IAAD,CAAO4B,GAAIpB,IAAWR,QAAQ,gB,2NAKlCH,EAAWgC,gBAAiB","file":"component---src-packages-ui-src-scroll-box-scroll-box-mdx-6dfa6e35d12feb3ea632.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/se/www/rkt-a/rkta/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { useState } from 'react';\nimport { Playground, Props } from 'docz';\nimport Range from 'lodash/range';\nimport { ScrollBox } from './ScrollBox';\nimport { Button, Divider, Paper } from '../';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"scrollbox\"\n    }}>{`ScrollBox`}</h1>\n    <p>{`Utility component preconfigured for easy use`}</p>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <h3 {...{\n      \"id\": \"horizontal\"\n    }}>{`Horizontal`}</h3>\n    <Playground __position={0} __code={'<ScrollBox x bgColor=\\\"warning\\\">\\n  {Range(0, 50).map(item => (\\n    <Paper\\n      bgColor=\\\"primary\\\"\\n      center\\n      size={50}\\n      css={{ margin: 4, flexShrink: 0, lineHeight: \\'50px\\' }}\\n      key={item}\\n    >\\n      {item}\\n    </Paper>\\n  ))}\\n</ScrollBox>'} __scope={{\n      props,\n      DefaultLayout,\n      useState,\n      Playground,\n      Props,\n      Range,\n      ScrollBox,\n      Button,\n      Divider,\n      Paper,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <ScrollBox x bgColor=\"warning\" mdxType=\"ScrollBox\">\n    {Range(0, 50).map(item => <Paper bgColor=\"primary\" center size={50} css={{\n          margin: 4,\n          flexShrink: 0,\n          lineHeight: '50px'\n        }} key={item} mdxType=\"Paper\">\n        {item}\n      </Paper>)}\n  </ScrollBox>\n    </Playground>\n    <h3 {...{\n      \"id\": \"vertical\"\n    }}>{`Vertical`}</h3>\n    <Playground __position={1} __code={'<ScrollBox\\n  hideScrollbars\\n  y\\n  css={{\\n    display: \\'flex\\',\\n    flexDirection: \\'column\\',\\n    width: 100,\\n    height: 200,\\n    margin: \\'auto\\',\\n  }}\\n>\\n  {Range(0, 50).map(item => (\\n    <Paper\\n      bgColor=\\\"success\\\"\\n      center\\n      size={50}\\n      css={{ margin: 4, flexShrink: 0, lineHeight: \\'50px\\' }}\\n      key={item}\\n    >\\n      {item}\\n    </Paper>\\n  ))}\\n</ScrollBox>'} __scope={{\n      props,\n      DefaultLayout,\n      useState,\n      Playground,\n      Props,\n      Range,\n      ScrollBox,\n      Button,\n      Divider,\n      Paper,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <ScrollBox hideScrollbars y css={{\n        display: 'flex',\n        flexDirection: 'column',\n        width: 100,\n        height: 200,\n        margin: 'auto'\n      }} mdxType=\"ScrollBox\">\n    {Range(0, 50).map(item => <Paper bgColor=\"success\" center size={50} css={{\n          margin: 4,\n          flexShrink: 0,\n          lineHeight: '50px'\n        }} key={item} mdxType=\"Paper\">\n        {item}\n      </Paper>)}\n  </ScrollBox>\n    </Playground>\n    <h3 {...{\n      \"id\": \"scroll-snapping\"\n    }}>{`Scroll Snapping`}</h3>\n    <Playground __position={2} __code={'<ScrollBox x hideScrollbars snap>\\n  {Range(1, 13).map(item => (\\n    <Paper\\n      bgColor={`color${item}`}\\n      center\\n      css={{\\n        flexShrink: 0,\\n        lineHeight: \\'80px\\',\\n        width: \\'100%\\',\\n      }}\\n      key={item}\\n    >\\n      {item}\\n    </Paper>\\n  ))}\\n</ScrollBox>'} __scope={{\n      props,\n      DefaultLayout,\n      useState,\n      Playground,\n      Props,\n      Range,\n      ScrollBox,\n      Button,\n      Divider,\n      Paper,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <ScrollBox x hideScrollbars snap mdxType=\"ScrollBox\">\n    {Range(1, 13).map(item => <Paper bgColor={`color${item}`} center css={{\n          flexShrink: 0,\n          lineHeight: '80px',\n          width: '100%'\n        }} key={item} mdxType=\"Paper\">\n        {item}\n      </Paper>)}\n  </ScrollBox>\n    </Playground>\n    <h3 {...{\n      \"id\": \"scroll-animated-height\"\n    }}>{`Scroll animated height`}</h3>\n    <Playground __position={3} __code={'() => {\\n  const [visible, setVisible] = useState(false)\\n  return (\\n    <>\\n      <Button onClick={() => setVisible(!visible)} bgColor=\\\"primary\\\">\\n        Toggle content\\n      </Button>\\n      <Divider invisible />\\n      <ScrollBox\\n        animateHeight\\n        visible={visible}\\n        css={{ outline: \\'1px dotted\\' }}\\n      >\\n        Animated content\\n      </ScrollBox>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useState,\n      Playground,\n      Props,\n      Range,\n      ScrollBox,\n      Button,\n      Divider,\n      Paper,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [visible, setVisible] = useState(false);\n        return <>\n        <Button onClick={() => setVisible(!visible)} bgColor=\"primary\" mdxType=\"Button\">Toggle content</Button>\n        <Divider invisible mdxType=\"Divider\" />\n        <ScrollBox animateHeight visible={visible} css={{\n            outline: '1px dotted'\n          }} mdxType=\"ScrollBox\">\n          Animated content\n        </ScrollBox>\n      </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={ScrollBox} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}