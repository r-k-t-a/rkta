{"version":3,"sources":["webpack:///../src/packages/ui/src/Fx/Fx.mdx"],"names":["_frontmatter","name","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","useState","Link","Playground","Props","Addon","Button","List","ListItem","ListTitle","Text","useFx","Cross","error","setError","onFadeDown","popoverProps","setFx","bgColor","onClick","children","css","onAnimationEnd","onClose","color","rize","position","bottom","right","width","zIndex","fitAll","main","round","type","transparent","message","isMDXComponent"],"mappings":"+mBAWO,IAAMA,EAAe,Q,+MAENC,EAKQ,UAL9B,IAAsBA,EAMhBC,EAAc,CAClBF,gBAEIG,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,SADR,SAGA,qBAAG,0BAAYC,WAAW,KAAvB,SAAH,wCACA,iBAAQ,CACN,GAAM,OADR,OAGA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,iYAiBL,iBAAQ,CACN,GAAM,WADR,WAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,k0CAAi1CC,QAAS,CAC33CL,QACAH,kBACAS,oBACAC,SACAC,eACAC,UACAC,UACAC,WACAC,SACAC,aACAC,cACAC,SACAC,UACAC,WACChB,QAAQ,eACZ,WACK,IADC,EA0ByBK,oBAAS,GAA5BY,EA1BN,KA0BaC,EA1Bb,OA8B6BH,YAAM,QAAS,CAC3CI,WAHiB,kBAAMD,GAAS,MAE3BE,EA9BN,KA8BoBC,EA9BpB,KAiCD,OAAO,gCACP,YAAC,IAAD,CAAQC,QAAQ,UAAUC,QAAS,WAC1BN,GAAOC,GAAS,GACrBG,EAAMJ,EAAQ,WAAa,UAC1BjB,QAAQ,UAHb,aAMCiB,GAAS,aAvCM,SAAC,GAAD,EACdO,SADc,IAEdC,EAFc,EAEdA,IACAC,EAHc,EAGdA,eACAC,EAJc,EAIdA,QAJc,OAKV,YAAC,IAAD,CAAML,QAAQ,OAAOM,MAAM,QAAQC,KAAM,EAAGJ,IAAG,YAAE,CAACA,EAAK,CAC3DK,SAAU,QACVC,OAAQ,GACRC,MAAO,GACPC,MAAO,IACPC,OAAQ,OACNR,eAAgBA,EAAgB1B,QAAQ,QAC5C,YAAC,IAAD,CAAW4B,MAAM,QAAQO,QAAM,EAACnC,QAAQ,aACtC,YAAC,IAAD,CAAOoC,MAAI,EAACpC,QAAQ,SAApB,UACA,YAAC,IAAD,CAAOA,QAAQ,SACb,YAAC,IAAD,CAAQuB,QAASI,EAASU,OAAK,EAACC,KAAK,SAASC,aAAW,EAACX,MAAM,QAAQ5B,QAAQ,UAC9E,YAAC,IAAD,CAAO4B,MAAM,QAAQ5B,QAAQ,aAInC,YAAC,IAAD,CAAUA,QAAQ,YAAlB,oBAmBU,KAAaoB,EAAb,CAA2BO,QAAS,kBAAMN,EAAM,aAAarB,QAAQ,YAC1EiB,EAAMuB,c,sMASnB3C,EAAW4C,gBAAiB","file":"component---src-packages-ui-src-fx-fx-mdx-fb1865cf0643bb46a1f8.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/se/www/maintined/rkta/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { useState } from 'react';\nimport { Link, Playground, Props } from 'docz';\nimport { Addon, Button, List, ListItem, ListTitle, Text } from '../';\nimport { useFx } from './useFx';\nimport { Cross } from '../../../entypo/src';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Popover = makeShortcode(\"Popover\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"usefx\"\n    }}>{`useFx`}</h1>\n    <p><inlineCode parentName=\"p\">{`useFx`}</inlineCode>{` allows you to apply various effects`}</p>\n    <h2 {...{\n      \"id\": \"use\"\n    }}>{`Use`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`/** @jsx jsx */\nimport { jsx } from '@emotion/core';\nimport { useFx } from '@rkta/ui';\n\nconst FxComponent = () => {\n  const onPopUp = () => console.log('pop up!');\n  const [fx, setFx] = useFx('popUp', { onPopUp });\n  return (\n    <div {...fx}>\n      Hi, I have FX.\n      <button onClick={() => setFx('fadeDown')}>\n        Hide me\n      </button>\n    </div>\n  );\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <Playground __position={0} __code={'() => {\\n  const Popover = ({ children, css, onAnimationEnd, onClose }) => (\\n    <List\\n      bgColor=\\\"text\\\"\\n      color=\\\"paper\\\"\\n      rize={1}\\n      css={[\\n        css,\\n        {\\n          position: \\'fixed\\',\\n          bottom: 16,\\n          right: 16,\\n          width: 320,\\n          zIndex: 1000,\\n        },\\n      ]}\\n      onAnimationEnd={onAnimationEnd}\\n    >\\n      <ListTitle color=\\\"error\\\" fitAll>\\n        <Addon main>Error!</Addon>\\n        <Addon>\\n          <Button\\n            onClick={onClose}\\n            round\\n            type=\\\"button\\\"\\n            transparent\\n            color=\\\"paper\\\"\\n          >\\n            <Cross color=\\\"paper\\\" />\\n          </Button>\\n        </Addon>\\n      </ListTitle>\\n      <ListItem>Error message</ListItem>\\n    </List>\\n  )\\n  const [error, setError] = useState(false)\\n  const onFadeDown = () => setError(false)\\n  const [popoverProps, setFx] = useFx(\\'popUp\\', { onFadeDown })\\n  return (\\n    <>\\n      <Button\\n        bgColor=\\\"primary\\\"\\n        onClick={() => {\\n          if (!error) setError(true)\\n          setFx(error ? \\'fadeDown\\' : \\'popUp\\')\\n        }}\\n      >\\n        Toggle FX\\n      </Button>\\n      {error && (\\n        <Popover {...popoverProps} onClose={() => setFx(\\'fadeDown\\')}>\\n          {error.message}\\n        </Popover>\\n      )}\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useState,\n      Link,\n      Playground,\n      Props,\n      Addon,\n      Button,\n      List,\n      ListItem,\n      ListTitle,\n      Text,\n      useFx,\n      Cross\n    }} mdxType=\"Playground\">\n  {() => {\n        const Popover = ({\n          children,\n          css,\n          onAnimationEnd,\n          onClose\n        }) => <List bgColor=\"text\" color=\"paper\" rize={1} css={[css, {\n          position: 'fixed',\n          bottom: 16,\n          right: 16,\n          width: 320,\n          zIndex: 1000\n        }]} onAnimationEnd={onAnimationEnd} mdxType=\"List\">\n        <ListTitle color=\"error\" fitAll mdxType=\"ListTitle\">\n          <Addon main mdxType=\"Addon\">Error!</Addon>\n          <Addon mdxType=\"Addon\">\n            <Button onClick={onClose} round type=\"button\" transparent color=\"paper\" mdxType=\"Button\">\n              <Cross color=\"paper\" mdxType=\"Cross\" />\n            </Button>\n          </Addon>\n        </ListTitle>\n        <ListItem mdxType=\"ListItem\">\n          Error message\n        </ListItem>\n      </List>;\n\n        const [error, setError] = useState(false);\n\n        const onFadeDown = () => setError(false);\n\n        const [popoverProps, setFx] = useFx('popUp', {\n          onFadeDown\n        });\n        return <>\n        <Button bgColor=\"primary\" onClick={() => {\n            if (!error) setError(true);\n            setFx(error ? 'fadeDown' : 'popUp');\n          }} mdxType=\"Button\">\n          Toggle FX\n        </Button>\n        {error && <Popover {...popoverProps} onClose={() => setFx('fadeDown')} mdxType=\"Popover\">\n            {error.message}\n          </Popover>}\n      </>;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}